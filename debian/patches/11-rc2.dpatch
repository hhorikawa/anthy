#! /bin/sh /usr/share/dpatch/dpatch-run
## 11-rc2.dpatch by Ikuya Awashiro <ikuya@fruitsbasket.info>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad anthy-9100h~/mkworddic/extra.t anthy-9100h/mkworddic/extra.t
--- anthy-9100h~/mkworddic/extra.t	2009-11-26 06:25:07.000000000 +0000
+++ anthy-9100h/mkworddic/extra.t	2009-11-26 06:26:42.000000000 +0000
@@ -47,7 +47,7 @@
 いっせんをかく #S5 #_5一線を_2画
 いってのけ #KS #_3言って_2のけ
 いっぽんじめ #T30 #_4一本_2締め
-いてもたってもい #KS #_3いてっも_4立っても_1い
+いてもたってもい #KS #_3いても_4立っても_1い
 いなかっぺたいしょう #T30 #_5田舎っぺ_5大将
 いのちあってのものだね #T35 #_3命_4あっての_4物種
 いのなかのかわずたいかいをし #R5 #_2井の_3中の_3蛙_5大海を_1知
diff -urNad anthy-9100h~/src-worddic/dic_util.c anthy-9100h/src-worddic/dic_util.c
--- anthy-9100h~/src-worddic/dic_util.c	2009-11-26 06:25:07.000000000 +0000
+++ anthy-9100h/src-worddic/dic_util.c	2009-11-26 06:26:42.000000000 +0000
@@ -162,20 +162,20 @@
     return v;
   }
   /**/
-  sprintf(word_iterator.key_buf, prefix);
+  sprintf(word_iterator.key_buf, "%s", prefix);
   return NULL;
 }
 
 static void
 delete_prefix(const char *prefix)
 {
-  sprintf(word_iterator.key_buf, prefix);
+  sprintf(word_iterator.key_buf, "%s", prefix);
   anthy_priv_dic_lock();
   /* word_iterator.key_bufがprefixの文字列であれば、find_next_key()は
      最初の単語を返す */
   while (find_next_key(prefix)) {
     anthy_trie_delete(anthy_private_tt_dic, word_iterator.key_buf);
-    sprintf(word_iterator.key_buf, prefix);
+    sprintf(word_iterator.key_buf, "%s", prefix);
   }
   anthy_priv_dic_unlock();
 }
@@ -234,7 +234,7 @@
     return select_first_entry_in_textdict();
   }
   if (anthy_private_tt_dic) {
-    sprintf(word_iterator.key_buf, encoding_prefix(dic_util_encoding));
+    sprintf(word_iterator.key_buf, "%s", encoding_prefix(dic_util_encoding));
     /* prefixの次のエントリが最初のエントリ */
     if (find_next_key(encoding_prefix(dic_util_encoding))) {
       word_iterator.in_tt = 1;
